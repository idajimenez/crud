{"ast":null,"code":"var _jsxFileName = \"/Users/idaaureajimenez/Documents/Exercises/crud-activity/src/components/UserList.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport User from './User';\nimport Button from './Button';\nimport makeApiRequest from '../makeApiReqest';\n\nfunction UserList({\n  toggleForm,\n  currentUserId\n}) {\n  const [users, setUsers] = useState([]);\n  const [isDeleting, setToggleDelete] = useState(false);\n  useEffect(() => {\n    if (!users.length) {\n      try {\n        makeApiRequest('/users?page=2').then(resp => {\n          console.log(resp.data);\n          setUsers(resp.data);\n        });\n      } catch (err) {// show error\n      }\n    }\n  }, [users]);\n  /**\n   * \n   * @param {String} id\n   * @param {Object} data (User)\n   * @param {String} action (update | delete)\n   */\n\n  const handleUpdateList = (id, action, data) => {\n    let currentUsers = users;\n    const index = currentUsers.findIndex(user => id === user.id);\n\n    if (action === 'update') {\n      currentUsers[index] = data;\n    } else {\n      currentUsers.splice(index, 1);\n    }\n\n    setUsers(currentUsers);\n    toggleForm();\n  };\n\n  const handleDelete = id => {\n    try {\n      setToggleDelete(true);\n      makeApiRequest(`/users/${id}`, 'Delete').then(resp => {\n        console.log(resp);\n        handleUpdateList(id, 'delete');\n        setToggleDelete(false);\n      });\n    } catch (err) {\n      // show error\n      setToggleDelete(false);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"user__list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, users.map((user, i) => React.createElement(\"div\", {\n    className: \"user__list-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(User, {\n    user: user,\n    isEdit: currentUserId === user.id,\n    toggleForm: toggleForm,\n    handleUpdateList: handleUpdateList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `user__actions ${currentUserId === user.id ? 'active' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, currentUserId !== user.id && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Button, {\n    label: \"Edit\",\n    color: \"blue\",\n    onClick: () => toggleForm(user),\n    isProcessing: isDeleting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Button, {\n    label: isDeleting ? 'Deleting' : 'Delete',\n    color: \"red\",\n    onClick: () => handleDelete(user.id),\n    isProcessing: isDeleting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }))))));\n}\n\nexport default UserList;","map":{"version":3,"sources":["/Users/idaaureajimenez/Documents/Exercises/crud-activity/src/components/UserList.js"],"names":["React","Fragment","useEffect","useState","User","Button","makeApiRequest","UserList","toggleForm","currentUserId","users","setUsers","isDeleting","setToggleDelete","length","then","resp","console","log","data","err","handleUpdateList","id","action","currentUsers","index","findIndex","user","splice","handleDelete","map","i"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport User from './User';\nimport Button from './Button';\nimport makeApiRequest from '../makeApiReqest';\n\nfunction UserList({ toggleForm, currentUserId }) {\n    const [users, setUsers] = useState([]);\n    const [isDeleting, setToggleDelete] = useState(false);\n\n    useEffect(() => {\n        if (!users.length) {\n            try {\n                makeApiRequest('/users?page=2').then(resp => {\n                    console.log(resp.data);\n                    setUsers(resp.data);\n                });\n            }\n            catch(err) {\n                // show error\n            }\n        }\n    }, [users]);\n\n    /**\n     * \n     * @param {String} id\n     * @param {Object} data (User)\n     * @param {String} action (update | delete)\n     */\n    const handleUpdateList = (id, action, data) => {\n        let currentUsers = users;\n        const index = currentUsers.findIndex(user => id === user.id);\n\n        if (action === 'update') {\n            currentUsers[index] = data;\n        }\n        else {\n            currentUsers.splice(index, 1);\n        }\n\n        setUsers(currentUsers);\n        toggleForm();\n    }\n\n\n    const handleDelete = (id) => {\n        try {\n            setToggleDelete(true);\n\n            makeApiRequest(`/users/${id}`, 'Delete', ).then(resp => {\n                console.log(resp)\n                handleUpdateList(id, 'delete');\n                setToggleDelete(false);\n            });\n        }\n        catch(err) {\n            // show error\n            setToggleDelete(false);\n        }\n    }\n\n    return (\n        <div className='user__list'>\n            {users.map((user, i) => (\n                <div className='user__list-item'>\n                    <User user={user} isEdit={currentUserId === user.id} toggleForm={toggleForm} handleUpdateList={handleUpdateList}/>\n                    <div className={`user__actions ${currentUserId === user.id ? 'active' : ''}`}>\n                        {currentUserId !== user.id && (\n                            <Fragment>\n                                <Button\n                                    label='Edit'\n                                    color='blue'\n                                    onClick={() => toggleForm(user)}\n                                    isProcessing={isDeleting} />\n                                <Button\n                                    label={isDeleting ? 'Deleting' : 'Delete'}\n                                    color='red'\n                                    onClick={() => handleDelete(user.id)}\n                                    isProcessing={isDeleting} />\n                            </Fragment>\n                        )}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default UserList;\n"]},"metadata":{},"sourceType":"module"}