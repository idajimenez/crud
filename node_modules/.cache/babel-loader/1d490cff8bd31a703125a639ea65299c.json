{"ast":null,"code":"var _jsxFileName = \"/Users/idaaureajimenez/Documents/Exercises/crud-activity/src/components/UserList.js\";\nimport React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport User from './User';\nimport Button from './Button';\nimport makeApiRequest from '../makeApiReqest';\n\nfunction UserList({\n  toggleForm,\n  currentUserId,\n  setNewUser,\n  newUser\n}) {\n  const [users, setUsers] = useState([]);\n  const [isDeleting, setToggleDelete] = useState(false);\n  /**\n   * \n   * @param {String} id\n   * @param {Object} data (User)\n   * @param {String} action (update | delete)\n   */\n\n  const handleUpdateList = useCallback((action, data, id) => {\n    let currentUsers = users;\n\n    if (action === 'add') {\n      currentUsers.unshift(data);\n    } else {\n      const index = currentUsers.findIndex(user => id === user.id);\n\n      if (action === 'update') {\n        currentUsers[index] = data;\n      } else {\n        currentUsers.splice(index, 1);\n      }\n    }\n\n    setUsers(currentUsers);\n    toggleForm();\n  }, [toggleForm, users]);\n  useEffect(() => {\n    if (!users.length) {\n      try {\n        makeApiRequest('/users?page=2').then(resp => {\n          console.log(resp.data);\n          setUsers(resp.data);\n        });\n      } catch (err) {// show error\n      }\n    }\n\n    if (newUser) {\n      handleUpdateList('add', newUser);\n      setNewUser(null);\n    }\n  }, [setNewUser, newUser, users, handleUpdateList]);\n\n  const handleDelete = id => {\n    try {\n      setToggleDelete(true);\n      makeApiRequest(`/users/${id}`, 'DELETE').then(resp => {\n        handleUpdateList('delete', null, id);\n        setToggleDelete(false);\n      });\n    } catch (err) {\n      // show error\n      setToggleDelete(false);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"user__list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, users.map((user, i) => React.createElement(\"div\", {\n    className: \"user__list-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(User, {\n    user: user,\n    isEdit: currentUserId === user.id,\n    toggleForm: toggleForm,\n    handleUpdateList: handleUpdateList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `user__actions ${currentUserId === user.id ? 'active' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, currentUserId !== user.id && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Button, {\n    label: \"Edit\",\n    color: \"blue\",\n    onClick: () => toggleForm(user),\n    isProcessing: isDeleting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(Button, {\n    label: isDeleting ? 'Deleting' : 'Delete',\n    color: \"red\",\n    onClick: () => handleDelete(user.id),\n    isProcessing: isDeleting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }))))));\n}\n\nexport default UserList;","map":{"version":3,"sources":["/Users/idaaureajimenez/Documents/Exercises/crud-activity/src/components/UserList.js"],"names":["React","Fragment","useEffect","useState","useCallback","User","Button","makeApiRequest","UserList","toggleForm","currentUserId","setNewUser","newUser","users","setUsers","isDeleting","setToggleDelete","handleUpdateList","action","data","id","currentUsers","unshift","index","findIndex","user","splice","length","then","resp","console","log","err","handleDelete","map","i"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState, useCallback } from 'react';\nimport User from './User';\nimport Button from './Button';\nimport makeApiRequest from '../makeApiReqest';\n\nfunction UserList({ toggleForm, currentUserId, setNewUser, newUser }) {\n    const [users, setUsers] = useState([]);\n    const [isDeleting, setToggleDelete] = useState(false);\n\n    /**\n     * \n     * @param {String} id\n     * @param {Object} data (User)\n     * @param {String} action (update | delete)\n     */\n    const handleUpdateList = useCallback((action, data, id) => {\n        let currentUsers = users;\n\n        if (action === 'add') {\n            currentUsers.unshift(data)\n        }\n        else {\n            const index = currentUsers.findIndex(user => id === user.id);\n    \n            if (action === 'update') {\n                currentUsers[index] = data;\n            }\n            else {\n                currentUsers.splice(index, 1);\n            }\n        }\n\n        setUsers(currentUsers);\n        toggleForm();\n    }, [toggleForm, users]);\n\n    useEffect(() => {\n        if (!users.length) {\n            try {\n                makeApiRequest('/users?page=2').then(resp => {\n                    console.log(resp.data);\n                    setUsers(resp.data);\n                });\n            }\n            catch(err) {\n                // show error\n            }\n        }\n\n        if (newUser) {\n            handleUpdateList('add', newUser)\n            setNewUser(null);\n        }\n    }, [setNewUser, newUser, users, handleUpdateList]);\n\n    const handleDelete = (id) => {\n        try {\n            setToggleDelete(true);\n\n            makeApiRequest(`/users/${id}`, 'DELETE', ).then(resp => {\n                handleUpdateList('delete', null, id);\n                setToggleDelete(false);\n            });\n        }\n        catch(err) {\n            // show error\n            setToggleDelete(false);\n        }\n    }\n\n    return (\n        <div className='user__list'>\n            {users.map((user, i) => (\n                <div className='user__list-item'>\n                    <User\n                        user={user}\n                        isEdit={currentUserId === user.id}\n                        toggleForm={toggleForm}\n                        handleUpdateList={handleUpdateList}/>\n                    <div className={`user__actions ${currentUserId === user.id ? 'active' : ''}`}>\n                        {currentUserId !== user.id && (\n                            <Fragment>\n                                <Button\n                                    label='Edit'\n                                    color='blue'\n                                    onClick={() => toggleForm(user)}\n                                    isProcessing={isDeleting} />\n                                <Button\n                                    label={isDeleting ? 'Deleting' : 'Delete'}\n                                    color='red'\n                                    onClick={() => handleDelete(user.id)}\n                                    isProcessing={isDeleting} />\n                            </Fragment>\n                        )}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default UserList;\n"]},"metadata":{},"sourceType":"module"}