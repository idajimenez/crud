{"ast":null,"code":"var _jsxFileName = \"/Users/idaaureajimenez/Documents/Exercises/crud-activity/src/App.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport Button from './components/Button';\nimport UserList from './components/UserList';\nimport User from './components/User';\nimport './App.css';\n\nfunction App() {\n  const [isFormVisible, setFormVisible] = useState(false);\n  const [currentUser, setUser] = useState({});\n  const [isSaving, setToggleSave] = useState(false);\n\n  const toggleForm = (user = {}) => {\n    setUser(user);\n\n    if (isFormVisible) {\n      setFormVisible(false);\n    }\n  };\n\n  const toggleNewUser = async () => {\n    setFormVisible(true);\n    setUser({\n      id: Math.floor(Math.random() * Math.floor(3)),\n      email: '',\n      first_name: '',\n      last_name: '',\n      avatar: 'https://via.placeholder.com/70x70'\n    });\n  }; // handleSaveNewUser = () => {\n  //     try {\n  //         setToggleSave(true);\n  //         const newUser = {\n  //             email: inputEmail.current.value,\n  //             first_name: inputFirstName.current.value,\n  //             last_name: inputLastName.current.value\n  //         };\n  //         makeApiRequest(`/users/${user.id}`, 'PUT', ).then(resp => {\n  //             if (resp.updatedAt) {\n  //                 handleUpdateList(user.id, 'update', {\n  //                     ...user,\n  //                     ...newValue\n  //                 });\n  //             }\n  //             setToggleSave(false);\n  //         });\n  //     }\n  //     catch(err) {\n  //         // show error\n  //         setToggleSave(false);\n  //     }\n  // }\n\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"user__list-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, isFormVisible ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(User, {\n    user: currentUser,\n    isEdit: isFormVisible,\n    toggleForm: toggleForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })) : React.createElement(Button, {\n    label: \"Add\",\n    color: \"green\",\n    onClick: toggleNewUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(UserList, {\n    toggleEdit: toggleForm,\n    currentUserId: currentUser.id || null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/idaaureajimenez/Documents/Exercises/crud-activity/src/App.js"],"names":["React","useState","useEffect","Fragment","Button","UserList","User","App","isFormVisible","setFormVisible","currentUser","setUser","isSaving","setToggleSave","toggleForm","user","toggleNewUser","id","Math","floor","random","email","first_name","last_name","avatar"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACX,QAAM,CAACC,aAAD,EAAgBC,cAAhB,IAAkCR,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACS,WAAD,EAAcC,OAAd,IAAyBV,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACW,QAAD,EAAWC,aAAX,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMa,UAAU,GAAG,CAACC,IAAI,GAAG,EAAR,KAAe;AAC9BJ,IAAAA,OAAO,CAACI,IAAD,CAAP;;AAEA,QAAIP,aAAJ,EAAmB;AACfC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH;AACJ,GAND;;AAQA,QAAMO,aAAa,GAAG,YAAY;AAC9BP,IAAAA,cAAc,CAAC,IAAD,CAAd;AAEAE,IAAAA,OAAO,CAAC;AACJM,MAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,CAAX,CAA3B,CADA;AAEJE,MAAAA,KAAK,EAAE,EAFH;AAGJC,MAAAA,UAAU,EAAE,EAHR;AAIJC,MAAAA,SAAS,EAAE,EAJP;AAKJC,MAAAA,MAAM,EAAE;AALJ,KAAD,CAAP;AAOH,GAVD,CAbW,CAyBX;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,aAAa,GACR,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEE,WAAZ;AAAyB,IAAA,MAAM,EAAEF,aAAjC;AAAgD,IAAA,UAAU,EAAEM,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADQ,GAIR,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,KAAd;AAAoB,IAAA,KAAK,EAAC,OAA1B;AAAkC,IAAA,OAAO,EAAEE,aAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALV,CADJ,EASI,oBAAC,QAAD;AAAU,IAAA,UAAU,EAAEF,UAAtB;AAAkC,IAAA,aAAa,EAAEJ,WAAW,CAACO,EAAZ,IAAkB,IAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADJ;AAaH;;AAED,eAAeV,GAAf","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport Button from './components/Button';\nimport UserList from './components/UserList';\nimport User from './components/User';\nimport './App.css';\n\nfunction App() {\n    const [isFormVisible, setFormVisible] = useState(false);\n    const [currentUser, setUser] = useState({});\n    const [isSaving, setToggleSave] = useState(false);\n\n    const toggleForm = (user = {}) => {\n        setUser(user);\n\n        if (isFormVisible) {\n            setFormVisible(false);\n        }\n    };\n\n    const toggleNewUser = async () => {\n        setFormVisible(true);\n\n        setUser({\n            id: Math.floor(Math.random() * Math.floor(3)),\n            email: '',\n            first_name: '',\n            last_name: '',\n            avatar: 'https://via.placeholder.com/70x70'\n        })\n    }\n\n    // handleSaveNewUser = () => {\n    //     try {\n    //         setToggleSave(true);\n\n    //         const newUser = {\n    //             email: inputEmail.current.value,\n    //             first_name: inputFirstName.current.value,\n    //             last_name: inputLastName.current.value\n    //         };\n\n    //         makeApiRequest(`/users/${user.id}`, 'PUT', ).then(resp => {\n    //             if (resp.updatedAt) {\n    //                 handleUpdateList(user.id, 'update', {\n    //                     ...user,\n    //                     ...newValue\n    //                 });\n    //             }\n\n    //             setToggleSave(false);\n    //         });\n    //     }\n    //     catch(err) {\n    //         // show error\n    //         setToggleSave(false);\n    //     }\n    // }\n\n    return (\n        <div className=\"App\">\n            <div className='user__list-item'>\n                {isFormVisible\n                    ? <Fragment>\n                        <User user={currentUser} isEdit={isFormVisible} toggleForm={toggleForm}/>\n                    </Fragment>\n                    : <Button label='Add' color='green' onClick={toggleNewUser}/>\n                }\n            </div>\n            <UserList toggleEdit={toggleForm} currentUserId={currentUser.id || null}/>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}