{"ast":null,"code":"var _jsxFileName = \"/Users/idaaureajimenez/Documents/Exercises/crud-activity/src/components/UserList.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport User from './User';\nimport Button from './Button';\nimport makeApiRequest from '../makeApiReqest';\n\nfunction UserList({\n  toggleEdit,\n  currentUserId\n}) {\n  const [users, setUsers] = useState([]);\n  const [isDeleting, setToggleDelete] = useState(false);\n  useEffect(() => {\n    if (!users.length) {\n      try {\n        makeApiRequest('/users?page=2').then(resp => {\n          console.log(resp.data);\n          setUsers(resp.data);\n        });\n      } catch (err) {// show error\n      }\n    }\n  }, [users]);\n  /**\n   * \n   * @param {String} id\n   * @param {Object} data (User)\n   * @param {String} action (add | update | delete)\n   */\n\n  const handleUpdateList = (id, action, data) => {\n    console.log(data);\n    let currentUsers = users;\n\n    if (action === 'add') {\n      currentUsers.unshift(data);\n    } else {\n      const index = currentUsers.findIndex(user => id === user.id);\n\n      if (action === 'update') {\n        currentUsers[index] = data;\n      } else {\n        currentUsers.splice(index, 1);\n      }\n    }\n\n    setUsers(currentUsers);\n    toggleEdit();\n  };\n\n  const handleDelete = id => {\n    try {\n      setToggleDelete(true);\n      makeApiRequest(`/users/${user.id}`, 'Delete').then(resp => {\n        if (resp.updatedAt) {\n          handleUpdateList(user.id, { ...user,\n            ...newValue\n          }, 'delete');\n        }\n\n        setToggleSave(false);\n      });\n    } catch (err) {\n      // show error\n      setToggleSave(false);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"user__list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, users.map((user, i) => React.createElement(\"div\", {\n    className: `user__list-item ${i % 2 === 0 ? 'highlight' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(User, {\n    user: user,\n    isEdit: currentUserId === user.id,\n    handleUpdateList: handleUpdateList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `user__actions ${currentUserId === user.id ? 'active' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, currentUserId !== user.id && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Button, {\n    label: \"Edit\",\n    color: \"blue\",\n    onClick: () => toggleEdit(user),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(Button, {\n    label: isDeleting ? 'Saving' : 'Delete',\n    color: \"red\",\n    onClick: () => handleDelete(user.id),\n    isProcessing: isDeleting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))))));\n}\n\nexport default UserList;","map":{"version":3,"sources":["/Users/idaaureajimenez/Documents/Exercises/crud-activity/src/components/UserList.js"],"names":["React","Fragment","useEffect","useState","User","Button","makeApiRequest","UserList","toggleEdit","currentUserId","users","setUsers","isDeleting","setToggleDelete","length","then","resp","console","log","data","err","handleUpdateList","id","action","currentUsers","unshift","index","findIndex","user","splice","handleDelete","updatedAt","newValue","setToggleSave","map","i"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport User from './User';\nimport Button from './Button';\nimport makeApiRequest from '../makeApiReqest';\n\nfunction UserList({ toggleEdit, currentUserId }) {\n    const [users, setUsers] = useState([]);\n    const [isDeleting, setToggleDelete] = useState(false);\n\n    useEffect(() => {\n        if (!users.length) {\n            try {\n                makeApiRequest('/users?page=2').then(resp => {\n                    console.log(resp.data);\n                    setUsers(resp.data);\n                });\n            }\n            catch(err) {\n                // show error\n            }\n        }\n    }, [users]);\n\n    /**\n     * \n     * @param {String} id\n     * @param {Object} data (User)\n     * @param {String} action (add | update | delete)\n     */\n    const handleUpdateList = (id, action, data) => {\n        console.log(data)\n        let currentUsers = users;\n\n        if (action === 'add') {\n            currentUsers.unshift(data);\n        }\n        else {\n            const index = currentUsers.findIndex(user => id === user.id);\n\n            if (action === 'update') {\n                currentUsers[index] = data;\n            }\n            else {\n                currentUsers.splice(index, 1);\n            }\n        }\n\n        setUsers(currentUsers);\n        toggleEdit();\n    }\n\n\n    const handleDelete = (id) => {\n        try {\n            setToggleDelete(true);\n\n            makeApiRequest(`/users/${user.id}`, 'Delete', ).then(resp => {\n                if (resp.updatedAt) {\n                    handleUpdateList(user.id, {\n                        ...user,\n                        ...newValue\n                    }, 'delete');\n                }\n\n                setToggleSave(false);\n            });\n        }\n        catch(err) {\n            // show error\n            setToggleSave(false);\n        }\n    }\n\n    return (\n        <div className='user__list'>\n            {users.map((user, i) => (\n                <div className={`user__list-item ${i % 2 === 0 ? 'highlight' : ''}`}>\n                    <User user={user} isEdit={currentUserId === user.id} handleUpdateList={handleUpdateList}/>\n                    <div className={`user__actions ${currentUserId === user.id ? 'active' : ''}`}>\n                        {currentUserId !== user.id && (\n                            <Fragment>\n                                <Button label='Edit' color='blue' onClick={() => toggleEdit(user)} />\n                                <Button\n                                    label={isDeleting ? 'Saving' : 'Delete'}\n                                    color='red'\n                                    onClick={() => handleDelete(user.id)}\n                                    isProcessing={isDeleting} />\n                            </Fragment>\n                        )}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default UserList;\n"]},"metadata":{},"sourceType":"module"}